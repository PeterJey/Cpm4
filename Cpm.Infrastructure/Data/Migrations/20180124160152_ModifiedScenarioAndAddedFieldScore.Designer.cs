// <auto-generated />
using Cpm.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Cpm.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180124160152_ModifiedScenarioAndAddedFieldScore")]
    partial class ModifiedScenarioAndAddedFieldScore
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Cpm.Core.Models.Farm", b =>
                {
                    b.Property<string>("FarmId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FirstDayOfYear");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("FarmId");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("Cpm.Core.Models.Field", b =>
                {
                    b.Property<string>("FieldId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AreaInHectares");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ProfileName");

                    b.Property<string>("SiteId")
                        .IsRequired();

                    b.Property<string>("Variety");

                    b.HasKey("FieldId");

                    b.HasIndex("SiteId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Cpm.Core.Models.FieldScore", b =>
                {
                    b.Property<string>("FieldId");

                    b.Property<int>("Version");

                    b.Property<decimal>("BudgetPerHectare");

                    b.Property<decimal>("BudgetPerPlant");

                    b.Property<decimal>("ChillUnits");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<decimal>("GrowingDegreeHours");

                    b.HasKey("FieldId", "Version");

                    b.ToTable("FieldScores");
                });

            modelBuilder.Entity("Cpm.Core.Models.PinnedNote", b =>
                {
                    b.Property<string>("FieldId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Version");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Text");

                    b.HasKey("FieldId", "Date", "Version");

                    b.ToTable("PinnedNotes");
                });

            modelBuilder.Entity("Cpm.Core.Models.Scenario", b =>
                {
                    b.Property<string>("ScenarioId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("SerializedSettings")
                        .IsRequired();

                    b.Property<string>("SiteId")
                        .IsRequired();

                    b.Property<int>("Version");

                    b.HasKey("ScenarioId");

                    b.HasIndex("SiteId");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("Cpm.Core.Models.Site", b =>
                {
                    b.Property<string>("SiteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FarmId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Postcode")
                        .IsRequired();

                    b.HasKey("SiteId");

                    b.HasIndex("FarmId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Cpm.Core.Models.SiteUserPermission", b =>
                {
                    b.Property<string>("SiteId");

                    b.Property<string>("UserId");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsDataEntry");

                    b.Property<bool>("IsManager");

                    b.Property<bool>("IsViewer");

                    b.HasKey("SiteId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SiteUserPermissions");
                });

            modelBuilder.Entity("Cpm.Core.Models.YieldRegister", b =>
                {
                    b.Property<string>("FieldId");

                    b.Property<int>("Version");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("FirstDay");

                    b.Property<string>("SerializedValues")
                        .IsRequired();

                    b.HasKey("FieldId", "Version");

                    b.ToTable("YieldRegisters");
                });

            modelBuilder.Entity("Cpm.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255);

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime?>("Activated");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsApplicationAdmin");

                    b.Property<bool>("IsSuspended");

                    b.Property<DateTime?>("LastLogin");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(255);

                    b.Property<string>("Note");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(255);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255);

                    b.Property<string>("RoleId")
                        .HasMaxLength(255);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Cpm.Core.Models.Field", b =>
                {
                    b.HasOne("Cpm.Core.Models.Site", "Site")
                        .WithMany("Fields")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cpm.Core.Models.FieldScore", b =>
                {
                    b.HasOne("Cpm.Core.Models.Field", "Field")
                        .WithMany("FieldScores")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cpm.Core.Models.PinnedNote", b =>
                {
                    b.HasOne("Cpm.Core.Models.Field", "Field")
                        .WithMany("PinnedNotes")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cpm.Core.Models.Scenario", b =>
                {
                    b.HasOne("Cpm.Core.Models.Site", "Site")
                        .WithMany("Scenarios")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cpm.Core.Models.Site", b =>
                {
                    b.HasOne("Cpm.Core.Models.Farm", "Farm")
                        .WithMany("Sites")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cpm.Core.Models.SiteUserPermission", b =>
                {
                    b.HasOne("Cpm.Core.Models.Site", "Site")
                        .WithMany("UserPermissions")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cpm.Infrastructure.Data.ApplicationUser")
                        .WithMany("SitePermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cpm.Core.Models.YieldRegister", b =>
                {
                    b.HasOne("Cpm.Core.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Cpm.Infrastructure.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Cpm.Infrastructure.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cpm.Infrastructure.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Cpm.Infrastructure.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
